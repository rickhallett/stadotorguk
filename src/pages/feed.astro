---
import Layout from '../layouts/Layout.astro';
import BrutalSection from '../components/astro/BrutalSection.astro';
import { getLeads, type Lead } from '../utils/database';
import { getMemberStats } from '../utils/memberStats';

// Get initial feed items from the database
const initialLeads = await getLeads(10, 0);

// Filter for leads with comments and format them for the feed
const feedItems = initialLeads
    .filter((lead: Lead) => lead.comments && lead.comments.trim() !== '')
    .map((lead: Lead, index: number) => {
        const timestamp = new Date(lead.timestamp);
        const now = new Date();
        const diffInHours = Math.floor((now.getTime() - timestamp.getTime()) / (1000 * 60 * 60));
        
        let timeAgo;
        if (diffInHours < 1) {
            timeAgo = 'Just now';
        } else if (diffInHours < 24) {
            timeAgo = `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`;
        } else {
            const diffInDays = Math.floor(diffInHours / 24);
            if (diffInDays === 1) {
                timeAgo = 'Yesterday';
            } else {
                timeAgo = `${diffInDays} days ago`;
            }
        }
        
        return {
            id: index + 1,
            username: lead.first_name,
            location: 'Swanage', // Location data is not in the leads table, so we'll use a placeholder
            timestamp: timeAgo,
            comment: lead.comments
        };
    });

// Get real member statistics with caching
const memberStats = await getMemberStats();
const activeUsers = memberStats.total;
const todayUsers = memberStats.today;
const weekUsers = memberStats.thisWeek;
const monthUsers = memberStats.thisMonth;

// Use database items if available, otherwise show a message
const displayItems = feedItems;

// Use cached total for movement counter (already fetched above)
const totalSupporters = memberStats.total;
const showLoadMore = feedItems.length >= 10;
---

<Layout title="Feed">
    <!-- HERO SECTION -->
    <section class="feed-hero">
        <h1 class="brutal-headline" style="font-size: clamp(3rem, 8vw, 6rem);">
            COMMUNITY<br/>VOICES
        </h1>
        <p class="brutal-subhead" style="font-size: clamp(1.2rem, 3vw, 2rem);">
            SILENCED BY THE COUNCIL. HEARD BY US.
        </p>
    </section>

    <!-- OUR MOVEMENT IS GROWING -->
    <BrutalSection title="OUR MOVEMENT IS GROWING">
        <div class="movement-section">
            <div class="movement-number" data-target={totalSupporters}>0</div>
            <p class="movement-subtitle">VOTERS STANDING WITH US</p>
            
        </div>
    </BrutalSection>

    <!-- USER COUNTER -->
    <BrutalSection title="THE UNCONSULTED MAJORITY">
        <div class="counter-container">
            
            <div class="counter-block counter-total" role="status" aria-label="Total membership count">
                <div class="data-stat" aria-live="polite">{activeUsers}</div>
                <div class="counter-label">Total Active Members</div>
            </div>
            <div class="statistics-grid" role="region" aria-label="Membership statistics">
                <div class="counter-block counter-stat" role="status">
                    <div class="data-stat" aria-label="{todayUsers} members">{todayUsers}</div>
                    <div class="counter-label">Joined Today</div>
                </div>
                <div class="counter-block counter-stat" role="status">
                    <div class="data-stat" aria-label="{weekUsers} members">{weekUsers}</div>
                    <div class="counter-label">Joined This Week</div>
                </div>
                <div class="counter-block counter-stat" role="status">
                    <div class="data-stat" aria-label="{monthUsers} members">{monthUsers}</div>
                    <div class="counter-label">Joined This Month</div>
                </div>
            </div>
        </div>
    </BrutalSection>

    <!-- FEED -->
    <BrutalSection title="LATEST MEMBERS">
        <div class="feed-container">
            {displayItems.length > 0 ? (
                displayItems.map((item) => (
                    <div class="feed-item fade-in" data-id={item.id}>
                        <div class="feed-meta">
                            <span class="feed-user">{item.username} â€¢ {item.location}</span>
                            <span class="feed-time">{item.timestamp}</span>
                        </div>
                        <div class="feed-content">
                            "{item.comment}"
                        </div>
                    </div>
                ))
            ) : (
                <p>No stories yet. Be the first to share yours!</p>
            )}
        </div>
        
        <div class="load-more-container">
            {showLoadMore && (
                <button class="submit-btn" id="loadMore">
                    LOAD MORE VOICES
                </button>
            )}
        </div>
    </BrutalSection>

    <!-- JOIN CTA -->
    <BrutalSection background="black">
        <h2 class="brutal-subhead" style="color: #FFD700; margin-bottom: 2rem;">
            ADD YOUR VOICE
        </h2>
        <p style="font-size: 1.25rem; margin-bottom: 2rem;">
            Your experience matters. Document the crisis. Join the resistance.
        </p>
        <a href="/" class="submit-btn" style="display: inline-block; text-decoration: none;">
            SHARE YOUR STORY
        </a>
    </BrutalSection>
</Layout>

<style>
    .feed-hero {
        background: var(--brutal-black);
        color: var(--brutal-white);
        padding: 6rem 2rem;
        text-align: center;
        border-bottom: 8px solid var(--brutal-gray); /* Green accent */
    }

    .feed-hero .brutal-headline {
        margin-bottom: 1rem;
    }

    .counter-container {
        display: grid;
        grid-template-columns: 1fr;
        gap: 0;
        max-width: 800px;
        margin: 0 auto;
    }

    .countdown-alert {
        background: #FF4500;
        color: var(--brutal-white);
        padding: 2rem;
        border: 4px solid var(--brutal-black);
        box-shadow: 8px 8px 0 var(--brutal-shadow);
        text-align: center;
        animation: pulse 2s ease-in-out infinite;
    }

    @keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.02);
        }
    }

    .countdown-number {
        font-family: 'Arial Black', sans-serif;
        font-size: 4rem;
        font-weight: 900;
        line-height: 1;
    }

    .countdown-label {
        font-size: 1.25rem;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.1em;
        margin-top: 0.5rem;
    }

    .counter-total {
        background: #FFD700 !important;
        color: var(--brutal-black) !important;
        padding: 2rem;
        border: 4px solid var(--brutal-black);
        box-shadow: 8px 8px 0 var(--brutal-shadow);
        text-align: center;
    }

    .counter-total .data-stat {
        color: var(--brutal-black) !important;
    }

    .statistics-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 16px;
        margin-top: 16px;
    }

    .counter-stat {
        background: #0066CC !important;
        transition: transform 0.2s ease;
    }

    .counter-stat:hover {
        transform: scale(1.02);
    }

    @media (max-width: 768px) {
        .statistics-grid {
            grid-template-columns: 1fr;
        }
    }

    .load-more-container {
        text-align: center;
        margin-top: 3rem;
    }

    /* Movement Counter Styles */
    .movement-section {
        text-align: center;
        padding: 3rem 0;
    }

    .movement-number {
        font-family: 'Arial Black', sans-serif;
        font-size: clamp(5rem, 12vw, 10rem);
        color: #FFD700; /* Golden yellow - positive growth */
        line-height: 1;
        margin: 1rem 0;
        font-weight: 900;
        letter-spacing: -0.05em;
    }

    .movement-subtitle {
        font-size: clamp(1.2rem, 3vw, 2rem);
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        color: var(--brutal-black);
        margin-bottom: 2rem;
    }

    .movement-cta {
        margin-top: 2rem;
    }

    .view-supporters-btn {
        display: inline-block;
        background: var(--brutal-black);
        color: var(--brutal-white);
        padding: 1rem 2rem;
        text-decoration: none;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        border: 4px solid var(--brutal-black);
        box-shadow: 8px 8px 0 var(--brutal-shadow);
        transition: all 0.2s;
    }

    .view-supporters-btn:hover {
        background: var(--brutal-gray);
        transform: translate(-4px, -4px);
        box-shadow: 12px 12px 0 var(--brutal-shadow);
    }

    /* Additional animations for feed items */
    .feed-item {
        opacity: 0;
        transform: translateY(20px);
        animation: fadeInUp 0.6s ease-out forwards;
    }

    .feed-item:nth-child(1) { animation-delay: 0.1s; }
    .feed-item:nth-child(2) { animation-delay: 0.2s; }
    .feed-item:nth-child(3) { animation-delay: 0.3s; }
    .feed-item:nth-child(4) { animation-delay: 0.4s; }
    .feed-item:nth-child(5) { animation-delay: 0.5s; }
    .feed-item:nth-child(6) { animation-delay: 0.6s; }
    .feed-item:nth-child(7) { animation-delay: 0.7s; }
    .feed-item:nth-child(8) { animation-delay: 0.8s; }

    @keyframes fadeInUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @media (max-width: 768px) {
        .feed-hero {
            padding: 4rem 1rem;
        }
    }
</style>

<script>
    let offset = 10; // Initial offset after the first batch
    const limit = 10;

    document.getElementById('loadMore')?.addEventListener('click', async function() {
        const container = document.querySelector('.feed-container');
        const button = this as HTMLButtonElement;
        
        // Disable button temporarily
        button.disabled = true;
        button.textContent = 'LOADING...';
        
        const response = await fetch(`/api/get-leads?limit=${limit}&offset=${offset}`);
        const newLeads = await response.json();

        if (newLeads.length > 0) {
            newLeads.forEach((lead: any, index: number) => {
                const timestamp = new Date(lead.timestamp);
                const now = new Date();
                const diffInHours = Math.floor((now.getTime() - timestamp.getTime()) / (1000 * 60 * 60));
                
                let timeAgo;
                if (diffInHours < 1) {
                    timeAgo = 'Just now';
                } else if (diffInHours < 24) {
                    timeAgo = `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`;
                } else {
                    const diffInDays = Math.floor(diffInHours / 24);
                    if (diffInDays === 1) {
                        timeAgo = 'Yesterday';
                    } else {
                        timeAgo = `${diffInDays} days ago`;
                    }
                }

                const feedItem = document.createElement('div');
                feedItem.className = 'feed-item fade-in';
                feedItem.style.animationDelay = `${(index + 1) * 0.1}s`;
                feedItem.innerHTML = `
                    <div class="feed-meta">
                        <span class="feed-user">${lead.first_name} â€¢ Swanage</span>
                        <span class="feed-time">${timeAgo}</span>
                    </div>
                    <div class="feed-content">
                        "${lead.comments}"
                    </div>
                `;
                container?.appendChild(feedItem);
            });

            offset += limit;
        }

        if (newLeads.length < limit) {
            button.style.display = 'none'; // Hide button if no more leads
        } else {
            button.disabled = false;
            button.textContent = 'LOAD MORE VOICES';
        }
    });

    // Counter animation
    function animateCounter(element: HTMLElement, target: number) {
        const duration = 2000;
        const start = 0;
        const increment = target / (duration / 16);
        let current = start;
        
        const timer = setInterval(() => {
            current += increment;
            if (current >= target) {
                element.textContent = target.toString();
                clearInterval(timer);
            } else {
                element.textContent = Math.floor(current).toString();
            }
        }, 16);
    }

    // Movement counter animation
    function animateMovementCounter() {
        const counter = document.querySelector('.movement-number') as HTMLElement;
        if (!counter) return;
        
        const target = parseInt(counter.dataset.target || '0');
        const duration = 2000;
        const step = target / (duration / 16);
        let current = 0;
        
        const updateCounter = () => {
            current += step;
            if (current < target) {
                counter.textContent = Math.floor(current).toLocaleString();
                requestAnimationFrame(updateCounter);
            } else {
                counter.textContent = target.toLocaleString();
            }
        };
        
        // Trigger on intersection
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    updateCounter();
                    observer.unobserve(entry.target);
                }
            });
        });
        
        observer.observe(counter);
    }

    // Animate counters on page load
    window.addEventListener('DOMContentLoaded', () => {
        // Animate movement counter
        animateMovementCounter();
        
        // Animate existing counters with staggered delay
        const counters = document.querySelectorAll('.counter-block .data-stat');
        counters.forEach((counter, index) => {
            const target = parseInt(counter.textContent || '0');
            // Add staggered delay for statistics blocks
            setTimeout(() => {
                animateCounter(counter as HTMLElement, target);
            }, index * 200); // 0.2s delay between each
        });

        // Calculate days until September 15, 2025
        function calculateDaysUntil() {
            const targetDate = new Date('2025-09-15');
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            targetDate.setHours(0, 0, 0, 0);
            
            const diffTime = targetDate - today;
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            
            if (diffDays === 0) return 'TODAY';
            if (diffDays === 1) return 'TOMORROW';
            if (diffDays < 0) return 'VOTE PASSED';
            return diffDays.toString();
        }
        
        const countdownElement = document.getElementById('daysUntilVote');
        if (countdownElement) {
            const daysText = calculateDaysUntil();
            countdownElement.textContent = daysText;
            
            // Add appropriate styling based on countdown status
            if (daysText === 'TODAY' || daysText === 'TOMORROW') {
                countdownElement.style.animation = 'pulse 1s ease-in-out infinite';
            }
            
            // Update ARIA label for screen readers
            const alertDiv = countdownElement.closest('.countdown-alert');
            if (alertDiv) {
                const ariaText = daysText === 'TODAY' ? 'Vote is today' : 
                                daysText === 'TOMORROW' ? 'Vote is tomorrow' :
                                daysText === 'VOTE PASSED' ? 'The vote has passed' :
                                `${daysText} days until the vote`;
                alertDiv.setAttribute('aria-label', ariaText);
            }
        }
    });
</script>