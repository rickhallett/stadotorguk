---
import Layout from '../../layouts/Layout.astro';
import BrutalSection from '../../components/astro/BrutalSection.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
    const ITEMS_PER_PAGE = 30;
    
    // Get all published leads
    const allLeads = await getCollection('leads', ({ data }) => data.published);
    
    // Calculate total pages
    const totalPages = Math.ceil(allLeads.length / ITEMS_PER_PAGE);
    
    // Generate paths for each page
    const paths = [];
    for (let i = 1; i <= totalPages; i++) {
        paths.push({
            params: { page: i.toString() },
            props: { pageNum: i }
        });
    }
    
    // Also add the root path (redirects to page 1)
    paths.push({
        params: { page: undefined },
        props: { pageNum: 1 }
    });
    
    return paths;
}

// Pagination configuration
const ITEMS_PER_PAGE = 30;

// Get all published leads
const allLeads = await getCollection('leads', ({ data }) => data.published);

// Sort by timestamp (newest first)
const sortedLeads = allLeads.sort((a, b) => {
    const dateA = new Date(a.data.timestamp);
    const dateB = new Date(b.data.timestamp);
    return dateB.getTime() - dateA.getTime();
});

// Get current page from props or params
const currentPage = Astro.props.pageNum || parseInt(Astro.params.page || '1');
const totalPages = Math.ceil(sortedLeads.length / ITEMS_PER_PAGE);

// Calculate pagination
const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
const endIndex = startIndex + ITEMS_PER_PAGE;
const paginatedLeads = sortedLeads.slice(startIndex, endIndex);

// Count by visitor type
const visitorTypeCounts = sortedLeads.reduce((acc, lead) => {
    const type = lead.data.visitor_type || 'Local';
    acc[type] = (acc[type] || 0) + 1;
    return acc;
}, {});
---

<Layout title="Campaign Supporters - Swanage Traffic Alliance">
    <main>
        <BrutalSection bgColor="var(--brutal-white)">
            <div class="supporters-header">
                <h1>CAMPAIGN SUPPORTERS</h1>
                <div class="stats-row">
                    <div class="stat-block">
                        <div class="stat-number">{sortedLeads.length}</div>
                        <div class="stat-label">TOTAL SUPPORTERS</div>
                    </div>
                    <div class="stat-block">
                        <div class="stat-number">{visitorTypeCounts.Local || 0}</div>
                        <div class="stat-label">LOCAL RESIDENTS</div>
                    </div>
                    <div class="stat-block">
                        <div class="stat-number">{visitorTypeCounts.Visitor || 0}</div>
                        <div class="stat-label">VISITORS</div>
                    </div>
                </div>
                <p class="page-info">
                    Showing {startIndex + 1}-{Math.min(endIndex, sortedLeads.length)} of {sortedLeads.length} supporters
                </p>
            </div>
        </BrutalSection>

        <BrutalSection bgColor="var(--brutal-concrete)">
            <div class="supporters-grid">
                {paginatedLeads.map((lead) => {
                    const date = new Date(lead.data.timestamp);
                    const dateStr = date.toLocaleDateString('en-GB', { 
                        day: 'numeric', 
                        month: 'short', 
                        year: 'numeric' 
                    });
                    
                    // Show first name and last initial for privacy
                    const displayName = `${lead.data.first_name} ${lead.data.last_name.charAt(0)}.`;
                    
                    return (
                        <div class="supporter-card">
                            <div class="supporter-header">
                                <h3>{displayName}</h3>
                                <span class="supporter-type">{lead.data.visitor_type}</span>
                            </div>
                            {lead.data.comments && (
                                <p class="supporter-comment">{lead.data.comments}</p>
                            )}
                            <div class="supporter-footer">
                                <span class="supporter-date">{dateStr}</span>
                            </div>
                        </div>
                    );
                })}
            </div>

            <!-- Pagination Controls -->
            <div class="pagination">
                {currentPage > 1 && (
                    <a href="/supporters/1" class="pagination-btn pagination-first">
                        FIRST
                    </a>
                )}
                
                {currentPage > 1 && (
                    <a href={`/supporters/${currentPage - 1}`} class="pagination-btn pagination-prev">
                        PREV
                    </a>
                )}
                
                <div class="pagination-info">
                    PAGE {currentPage} OF {totalPages}
                </div>
                
                {currentPage < totalPages && (
                    <a href={`/supporters/${currentPage + 1}`} class="pagination-btn pagination-next">
                        NEXT
                    </a>
                )}
                
                {currentPage < totalPages && (
                    <a href={`/supporters/${totalPages}`} class="pagination-btn pagination-last">
                        LAST
                    </a>
                )}
            </div>
        </BrutalSection>
    </main>
</Layout>

<style>
    .supporters-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .supporters-header h1 {
        font-family: 'Arial Black', sans-serif;
        font-size: clamp(2rem, 5vw, 3.5rem);
        letter-spacing: -0.02em;
        margin-bottom: 2rem;
        text-transform: uppercase;
    }

    .stats-row {
        display: flex;
        justify-content: center;
        gap: 2rem;
        flex-wrap: wrap;
        margin-bottom: 2rem;
    }

    .stat-block {
        background: var(--brutal-white);
        border: 4px solid var(--brutal-black);
        padding: 1.5rem 2rem;
        box-shadow: 8px 8px 0 var(--brutal-shadow);
    }

    .stat-number {
        font-family: 'Arial Black', sans-serif;
        font-size: 2.5rem;
        color: var(--brutal-red);
    }

    .stat-label {
        font-size: 0.875rem;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        margin-top: 0.5rem;
    }

    .page-info {
        font-size: 0.875rem;
        color: var(--brutal-gray);
        margin-top: 1rem;
    }

    .supporters-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
        margin-bottom: 3rem;
    }

    .supporter-card {
        background: var(--brutal-white);
        border: 3px solid var(--brutal-black);
        padding: 1.5rem;
        box-shadow: 6px 6px 0 var(--brutal-shadow);
        transition: transform 0.2s;
    }

    .supporter-card:hover {
        transform: translate(-2px, -2px);
        box-shadow: 8px 8px 0 var(--brutal-shadow);
    }

    .supporter-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid var(--brutal-black);
    }

    .supporter-header h3 {
        font-family: 'Arial Black', sans-serif;
        font-size: 1.125rem;
        margin: 0;
    }

    .supporter-type {
        background: var(--brutal-black);
        color: var(--brutal-white);
        padding: 0.25rem 0.75rem;
        font-size: 0.75rem;
        font-weight: bold;
        text-transform: uppercase;
    }

    .supporter-comment {
        margin: 1rem 0;
        line-height: 1.5;
        color: var(--brutal-gray);
        font-style: italic;
    }

    .supporter-footer {
        margin-top: 1rem;
        padding-top: 0.5rem;
        border-top: 1px solid var(--brutal-concrete);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .supporter-date {
        font-size: 0.75rem;
        color: var(--brutal-gray);
        text-transform: uppercase;
    }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1rem;
        margin-top: 3rem;
        flex-wrap: wrap;
    }

    .pagination-btn {
        background: var(--brutal-black);
        color: var(--brutal-white);
        padding: 0.75rem 1.5rem;
        text-decoration: none;
        font-weight: bold;
        text-transform: uppercase;
        border: 3px solid var(--brutal-black);
        box-shadow: 4px 4px 0 var(--brutal-shadow);
        transition: all 0.2s;
    }

    .pagination-btn:hover {
        background: var(--brutal-red);
        transform: translate(-2px, -2px);
        box-shadow: 6px 6px 0 var(--brutal-shadow);
    }

    .pagination-info {
        padding: 0.75rem 1.5rem;
        font-weight: bold;
        background: var(--brutal-white);
        border: 3px solid var(--brutal-black);
        box-shadow: 4px 4px 0 var(--brutal-shadow);
    }

    @media (max-width: 768px) {
        .stats-row {
            flex-direction: column;
            align-items: center;
        }

        .stat-block {
            width: 100%;
            max-width: 300px;
        }

        .supporters-grid {
            grid-template-columns: 1fr;
        }

        .pagination {
            flex-direction: column;
            gap: 0.5rem;
        }

        .pagination-btn,
        .pagination-info {
            width: 100%;
            text-align: center;
        }
    }
</style>