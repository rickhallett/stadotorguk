---
---

<section class="community-counter-section">
  <div class="counter-container">
    <h2 class="section-title">Community Voices</h2>
    <p class="section-description">
      Your voice matters. Join the growing number of residents demanding accountability.
    </p>
    
    <div class="counter-display">
      <div class="counter-number" id="participant-count">
        <span class="counter-value">0</span>
      </div>
      <p class="counter-label">Residents Have Shared Their Concerns</p>
    </div>
    
    <div class="counter-stats">
      <div class="stat-item">
        <span class="stat-value" id="today-count">0</span>
        <span class="stat-label">Today</span>
      </div>
      <div class="stat-item">
        <span class="stat-value" id="week-count">0</span>
        <span class="stat-label">This Week</span>
      </div>
      <div class="stat-item">
        <span class="stat-value" id="month-count">0</span>
        <span class="stat-label">This Month</span>
      </div>
    </div>
    
    <div class="cta-container">
      <a href="/feeds" class="btn-primary">View Community Feedback</a>
    </div>
  </div>
</section>

<style>
.community-counter-section {
  padding: calc(var(--grid-unit) * 10) 0;
  background-color: var(--color-background);
}

.counter-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 0 calc(var(--grid-unit) * 3);
  text-align: center;
}

.section-title {
  font-family: var(--font-heading-primary);
  font-size: 2.5rem;
  color: var(--color-accent);
  margin-bottom: calc(var(--grid-unit) * 2);
}

.section-description {
  font-size: 1.1rem;
  color: var(--color-text-secondary);
  margin-bottom: calc(var(--grid-unit) * 6);
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
}

.counter-display {
  margin-bottom: calc(var(--grid-unit) * 6);
}

.counter-number {
  display: inline-block;
  position: relative;
}

.counter-value {
  font-family: var(--font-heading-primary);
  font-size: clamp(4rem, 10vw, 6rem);
  font-weight: 900;
  color: var(--color-accent);
  line-height: 1;
  display: block;
  margin-bottom: calc(var(--grid-unit) * 2);
}

.counter-label {
  font-family: var(--font-heading-secondary);
  font-size: 1.3rem;
  font-weight: 300;
  text-transform: uppercase;
  letter-spacing: 0.1em;
  color: var(--color-text-primary);
}

.counter-stats {
  display: flex;
  justify-content: center;
  gap: calc(var(--grid-unit) * 6);
  margin-bottom: calc(var(--grid-unit) * 6);
  padding: calc(var(--grid-unit) * 4);
  background-color: var(--color-surface);
  border-radius: 8px;
}

.stat-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: calc(var(--grid-unit) * 1);
}

.stat-value {
  font-family: var(--font-heading-primary);
  font-size: 2rem;
  font-weight: 700;
  color: var(--color-accent);
}

.stat-label {
  font-size: 0.9rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  color: var(--color-text-muted);
}

.cta-container {
  margin-top: calc(var(--grid-unit) * 4);
}

.btn-primary {
  display: inline-block;
  padding: calc(var(--grid-unit) * 2) calc(var(--grid-unit) * 4);
  font-family: var(--font-body);
  font-size: 1.1rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  color: white;
  background-color: var(--color-accent);
  text-decoration: none;
  border-radius: 4px;
  transition: all 0.3s ease;
}

.btn-primary:hover {
  background-color: color-mix(in srgb, var(--color-accent) 85%, black);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);
}

@media (max-width: 768px) {
  .counter-stats {
    flex-direction: column;
    gap: calc(var(--grid-unit) * 3);
  }
  
  .stat-item {
    flex-direction: row;
    justify-content: space-between;
    width: 100%;
    max-width: 200px;
  }
}

/* Counter animation */
@keyframes countUp {
  from {
    opacity: 0;
    transform: scale(0.8);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

.counter-value {
  animation: countUp 0.5s ease-out;
}
</style>

<script>
  // Simulate fetching participant count
  async function getParticipantCount() {
    try {
      // In production, this would fetch from your API
      // const response = await fetch('/api/get-count');
      // const data = await response.json();
      // return data;
      
      // For now, return mock data
      return {
        total: 1247,
        today: 23,
        week: 156,
        month: 432
      };
    } catch (error) {
      console.error('Error fetching participant count:', error);
      return {
        total: 0,
        today: 0,
        week: 0,
        month: 0
      };
    }
  }
  
  // Animate counter from 0 to target value
  function animateCounter(element: HTMLElement, target: number, duration = 2000) {
    if (!element) return;
    
    const start = 0;
    const increment = target / (duration / 16); // 60fps
    let current = start;
    
    const timer = setInterval(() => {
      current += increment;
      if (current >= target) {
        current = target;
        clearInterval(timer);
      }
      element.textContent = Math.floor(current).toLocaleString();
    }, 16);
  }
  
  // Initialize counter on page load
  async function initializeCounter() {
    const data = await getParticipantCount();
    
    const mainCounter = document.querySelector('.counter-value') as HTMLElement;
    const todayCounter = document.getElementById('today-count') as HTMLElement;
    const weekCounter = document.getElementById('week-count') as HTMLElement;
    const monthCounter = document.getElementById('month-count') as HTMLElement;
    
    // Animate counters
    if (mainCounter) animateCounter(mainCounter, data.total);
    if (todayCounter) animateCounter(todayCounter, data.today, 1000);
    if (weekCounter) animateCounter(weekCounter, data.week, 1500);
    if (monthCounter) animateCounter(monthCounter, data.month, 1800);
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', initializeCounter);
</script>