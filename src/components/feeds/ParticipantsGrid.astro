---
---

<section class="participants-section">
  <div class="participants-container">
    <h2 class="section-title">Recent Feedback</h2>
    <p class="section-description">
      Latest concerns and experiences shared by community members
    </p>
    
    <div class="participants-grid" id="participants-grid">
      <div class="loading-state">
        <div class="spinner"></div>
        <p>Loading community feedback...</p>
      </div>
    </div>
    
    <div class="load-more-container">
      <button type="button" class="load-more-btn" id="load-more">Load More</button>
    </div>
  </div>
</section>

<style>
.participants-section {
  padding: calc(var(--grid-unit) * 10) 0;
  background-color: var(--color-surface);
}

.participants-container {
  max-width: var(--max-width);
  margin: 0 auto;
  padding: 0 calc(var(--grid-unit) * 3);
}

.section-title {
  font-family: var(--font-heading-primary);
  font-size: 2.5rem;
  text-align: center;
  color: var(--color-accent);
  margin-bottom: calc(var(--grid-unit) * 2);
}

.section-description {
  text-align: center;
  font-size: 1.1rem;
  color: var(--color-text-secondary);
  margin-bottom: calc(var(--grid-unit) * 6);
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
}

.participants-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: calc(var(--grid-unit) * 3);
  margin-bottom: calc(var(--grid-unit) * 6);
}

.participant-card {
  background-color: var(--color-background);
  padding: calc(var(--grid-unit) * 3);
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
  opacity: 0;
  animation: fadeInUp 0.5s ease-out forwards;
}

.participant-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.participant-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: calc(var(--grid-unit) * 2);
}

.participant-info {
  flex: 1;
}

.participant-name {
  font-weight: 600;
  color: var(--color-text-primary);
  margin-bottom: calc(var(--grid-unit) * 0.5);
}

.participant-location {
  font-size: 0.9rem;
  color: var(--color-text-muted);
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.participant-date {
  font-size: 0.85rem;
  color: var(--color-text-muted);
}

.participant-comment {
  font-size: 1rem;
  line-height: 1.6;
  color: var(--color-text-secondary);
  padding-top: calc(var(--grid-unit) * 2);
  border-top: 1px solid var(--color-border);
}

.participant-tags {
  display: flex;
  flex-wrap: wrap;
  gap: calc(var(--grid-unit) * 1);
  margin-top: calc(var(--grid-unit) * 2);
}

.tag {
  display: inline-block;
  padding: calc(var(--grid-unit) * 0.5) calc(var(--grid-unit) * 1.5);
  background-color: var(--color-surface);
  color: var(--color-text-secondary);
  font-size: 0.85rem;
  border-radius: 20px;
  border: 1px solid var(--color-border);
}

.loading-state {
  grid-column: 1 / -1;
  text-align: center;
  padding: calc(var(--grid-unit) * 6);
}

.spinner {
  width: 50px;
  height: 50px;
  margin: 0 auto calc(var(--grid-unit) * 2);
  border: 4px solid var(--color-border);
  border-top-color: var(--color-accent);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.load-more-container {
  text-align: center;
}

.load-more-btn {
  padding: calc(var(--grid-unit) * 2) calc(var(--grid-unit) * 4);
  font-family: var(--font-body);
  font-size: 1rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  color: var(--color-accent);
  background-color: transparent;
  border: 2px solid var(--color-accent);
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.load-more-btn:hover {
  background-color: var(--color-accent);
  color: white;
}

.load-more-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

@media (max-width: 768px) {
  .participants-grid {
    grid-template-columns: 1fr;
  }
}
</style>

<script>
  let currentPage = 1;
  const itemsPerPage = 6;
  
  async function fetchParticipants(page = 1) {
    try {
      // In production, fetch from API
      // const response = await fetch(`/api/get-all-participants?page=${page}&limit=${itemsPerPage}`);
      // const data = await response.json();
      
      // Mock data for demonstration
      const mockParticipants = generateMockParticipants(page);
      return mockParticipants;
    } catch (error) {
      console.error('Error fetching participants:', error);
      return [];
    }
  }
  
  function generateMockParticipants(page: number) {
    const concerns = [
      "Traffic Congestion", "Pedestrian Safety", "Parking", 
      "Emergency Access", "Business Impact", "Air Quality"
    ];
    
    const comments = [
      "The new traffic system has made it impossible to reach the high street during peak hours.",
      "I'm concerned about children crossing near the school with the increased traffic flow.",
      "Emergency vehicles struggled to reach our street last week due to the new restrictions.",
      "My business has seen a 40% drop in customers since the changes were implemented.",
      "The air quality has noticeably worsened with all the stationary traffic.",
      "Elderly residents can't safely cross the road anymore with the current setup.",
      "Delivery drivers are avoiding our area completely now.",
      "The consultation process completely ignored our feedback.",
    ];
    
    const participants = [];
    const startIndex = (page - 1) * itemsPerPage;
    
    for (let i = 0; i < itemsPerPage; i++) {
      const date = new Date();
      date.setDate(date.getDate() - (startIndex + i));
      
      participants.push({
        id: startIndex + i + 1,
        name: `Resident ${startIndex + i + 1}`,
        location: ["Town Centre", "High Street", "Residential Area", "Beach Road"][Math.floor(Math.random() * 4)],
        date: date.toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' }),
        comment: comments[Math.floor(Math.random() * comments.length)],
        tags: [concerns[Math.floor(Math.random() * concerns.length)], concerns[Math.floor(Math.random() * concerns.length)]].filter((v, i, a) => a.indexOf(v) === i)
      });
    }
    
    return participants;
  }
  
  function renderParticipants(participants: any[], append = false) {
    const container = document.getElementById('participants-grid');
    if (!container) return;
    
    const html = participants.map((participant: any, index: number) => `
      <div class="participant-card" style="animation-delay: ${index * 0.1}s">
        <div class="participant-header">
          <div class="participant-info">
            <div class="participant-name">${participant.name}</div>
            <div class="participant-location">${participant.location}</div>
          </div>
          <div class="participant-date">${participant.date}</div>
        </div>
        <div class="participant-comment">
          "${participant.comment}"
        </div>
        <div class="participant-tags">
          ${participant.tags.map((tag: string) => `<span class="tag">${tag}</span>`).join('')}
        </div>
      </div>
    `).join('');
    
    if (append) {
      // Remove any loading states first
      const loadingState = container.querySelector('.loading-state');
      if (loadingState) loadingState.remove();
      
      // Append new content
      container.insertAdjacentHTML('beforeend', html);
    } else {
      container.innerHTML = html;
    }
  }
  
  async function loadMoreParticipants() {
    const button = document.getElementById('load-more') as HTMLButtonElement;
    if (!button) return;
    
    button.disabled = true;
    button.textContent = 'Loading...';
    
    currentPage++;
    const participants = await fetchParticipants(currentPage);
    
    if (participants.length > 0) {
      renderParticipants(participants, true);
      button.textContent = 'Load More';
      button.disabled = false;
    } else {
      button.textContent = 'No More Results';
      button.disabled = true;
    }
  }
  
  // Initialize
  document.addEventListener('DOMContentLoaded', async () => {
    // Initial load with delay for effect
    setTimeout(async () => {
      const participants = await fetchParticipants(1);
      renderParticipants(participants);
    }, 1000);
    
    // Load more button
    const loadMoreBtn = document.getElementById('load-more');
    if (loadMoreBtn) {
      loadMoreBtn.addEventListener('click', loadMoreParticipants);
    }
  });
</script>