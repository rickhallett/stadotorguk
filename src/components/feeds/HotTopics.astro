---
---

<section class="hot-topics-section">
  <div class="topics-container">
    <h2 class="section-title">Key Concerns</h2>
    <p class="section-description">
      The most frequently raised issues by our community
    </p>
    
    <div class="topics-grid" id="topics-grid">
      <div class="loading-state">
        <div class="spinner"></div>
        <p>Analyzing community feedback...</p>
      </div>
    </div>
  </div>
</section>

<style>
.hot-topics-section {
  padding: calc(var(--grid-unit) * 10) 0;
  background-color: var(--color-background);
}

.topics-container {
  max-width: var(--max-width);
  margin: 0 auto;
  padding: 0 calc(var(--grid-unit) * 3);
}

.section-title {
  font-family: var(--font-heading-primary);
  font-size: 2.5rem;
  text-align: center;
  color: var(--color-accent);
  margin-bottom: calc(var(--grid-unit) * 2);
}

.section-description {
  text-align: center;
  font-size: 1.1rem;
  color: var(--color-text-secondary);
  margin-bottom: calc(var(--grid-unit) * 6);
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
}

.topics-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: calc(var(--grid-unit) * 3);
  max-width: 1000px;
  margin: 0 auto;
}

.topic-card {
  background-color: var(--color-surface);
  padding: calc(var(--grid-unit) * 3);
  border-radius: 12px;
  border-left: 4px solid var(--color-accent);
  transition: all 0.3s ease;
}

.topic-card:hover {
  transform: translateX(4px);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.topic-title {
  font-family: var(--font-heading-secondary);
  font-size: 1.3rem;
  font-weight: 600;
  color: var(--color-text-primary);
  margin-bottom: calc(var(--grid-unit) * 1);
}

.topic-count {
  display: inline-block;
  background-color: var(--color-accent);
  color: white;
  padding: calc(var(--grid-unit) * 0.5) calc(var(--grid-unit) * 1.5);
  border-radius: 20px;
  font-size: 0.9rem;
  font-weight: 600;
  margin-bottom: calc(var(--grid-unit) * 2);
}

.topic-description {
  font-size: 1rem;
  line-height: 1.6;
  color: var(--color-text-secondary);
}

.loading-state {
  grid-column: 1 / -1;
  text-align: center;
  padding: calc(var(--grid-unit) * 6);
}

.spinner {
  width: 50px;
  height: 50px;
  margin: 0 auto calc(var(--grid-unit) * 2);
  border: 4px solid var(--color-border);
  border-top-color: var(--color-accent);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

@media (max-width: 768px) {
  .topics-grid {
    grid-template-columns: 1fr;
  }
}
</style>

<script>
  async function fetchTopics() {
    try {
      // In production, fetch from API
      // const response = await fetch('/api/analyze-concerns');
      // const data = await response.json();
      
      // Mock data for demonstration
      const mockTopics = [
        {
          title: "Traffic Congestion",
          count: 342,
          description: "Increased congestion during peak hours affecting daily commutes and local businesses."
        },
        {
          title: "Pedestrian Safety",
          count: 287,
          description: "Concerns about crossing safety, especially near schools and elderly care facilities."
        },
        {
          title: "Parking Restrictions",
          count: 256,
          description: "New parking restrictions affecting residents and visitors without adequate alternatives."
        },
        {
          title: "Emergency Access",
          count: 198,
          description: "Worries about emergency vehicle access times due to traffic calming measures."
        },
        {
          title: "Business Impact",
          count: 176,
          description: "Local businesses reporting decreased footfall due to access difficulties."
        },
        {
          title: "Air Quality",
          count: 145,
          description: "Increased pollution from stationary traffic in residential areas."
        }
      ];
      
      return mockTopics;
    } catch (error) {
      console.error('Error fetching topics:', error);
      return [];
    }
  }
  
  async function renderTopics() {
    const container = document.getElementById('topics-grid');
    if (!container) return;
    
    const topics = await fetchTopics();
    
    if (topics.length === 0) {
      container.innerHTML = `
        <div class="loading-state">
          <p>No topics available at the moment.</p>
        </div>
      `;
      return;
    }
    
    container.innerHTML = topics.map(topic => `
      <div class="topic-card">
        <h3 class="topic-title">${topic.title}</h3>
        <span class="topic-count">${topic.count} mentions</span>
        <p class="topic-description">${topic.description}</p>
      </div>
    `).join('');
  }
  
  // Simulate loading delay then render
  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(renderTopics, 1500);
  });
</script>