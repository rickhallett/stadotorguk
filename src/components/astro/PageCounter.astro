---
// PageCounter.astro - Displays and tracks page views using Vercel Edge Config

// Determine the API URL based on environment
const isDev = import.meta.env.DEV;
const apiBaseUrl = isDev
  ? "http://localhost:4321" // Use localhost for Astro dev server
  : import.meta.env.PUBLIC_SITE_URL || "";

// Fetch current count (read-only, doesn't increment)
let count = 0;
let error = false;

try {
  const apiUrl = `${apiBaseUrl}/api/counter?action=read`;

  const response = await fetch(apiUrl, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  });

  if (response.ok) {
    const data = await response.json();
    count = data.count || 0;
  } else {
    console.error("Failed to fetch counter:", response.status);
    error = true;
  }
} catch (err) {
  console.error("Error fetching counter:", err);
  error = true;
}

// Format the count with thousand separators
const formattedCount = new Intl.NumberFormat("en-GB").format(count);
---

<div class="counter-block" data-api-url="/api/counter">
  <div class="counter-content">
    <span class="counter-number" data-count={count}>
      {error ? "---" : formattedCount}
    </span>
    <span class="counter-label">SITE VIEWS</span>
  </div>
  {
    error && (
      <span class="counter-error" aria-hidden="true">
        !
      </span>
    )
  }
</div>

<script is:inline>
  if (typeof window !== "undefined") {
    const counterBlock = document.querySelector(".counter-block");
    const apiUrl = counterBlock?.getAttribute("data-api-url");

    if (apiUrl) {
      // Increment the counter asynchronously (with cache busting)
      fetch(`${apiUrl}?action=increment&t=${Date.now()}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Cache-Control": "no-cache",
        },
      })
        .then((response) => response.json())
        .then((data) => {
          // Optionally update the displayed count with the new value
          if (data.count) {
            const counterNumber = document.querySelector(".counter-number");
            if (counterNumber) {
              const formattedCount = new Intl.NumberFormat("en-GB").format(
                data.count
              );
              counterNumber.textContent = formattedCount;
              counterNumber.setAttribute("data-count", data.count);

              // Add a subtle pulse animation to show the update
              counterNumber.classList.add("counter-updated");
              setTimeout(() => {
                counterNumber.classList.remove("counter-updated");
              }, 600);
            }
          }
        })
        .catch((err) => {
          console.error("Failed to increment counter:", err);
        });
    }
  }
</script>

<style>
  .counter-block {
    display: inline-flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem 1.5rem;
    border: 4px solid var(--brutal-black, #000);
    background: var(--brutal-white, #fff);
    box-shadow: 8px 8px 0 var(--brutal-shadow, rgba(0, 0, 0, 0.15));
    position: relative;
    transition: transform 0.2s ease;
  }

  .counter-block:hover {
    transform: translate(-2px, -2px);
    box-shadow: 10px 10px 0 var(--brutal-shadow, rgba(0, 0, 0, 0.15));
  }

  .counter-content {
    display: flex;
    align-items: baseline;
    gap: 0.75rem;
  }

  .counter-number {
    font-family: "Arial Black", Arial, sans-serif;
    font-size: clamp(1.5rem, 3vw, 2.5rem);
    font-weight: 900;
    color: var(--brutal-red, #ff0000);
    letter-spacing: -0.02em;
    transition: transform 0.3s ease;
  }

  .counter-number.counter-updated {
    animation: pulse 0.6s ease;
  }

  @keyframes pulse {
    0%,
    100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
  }

  .counter-label {
    font-family: "Arial Black", Arial, sans-serif;
    font-size: 0.875rem;
    font-weight: 900;
    letter-spacing: 0.05em;
    text-transform: uppercase;
    color: var(--brutal-black, #000);
  }

  .counter-error {
    position: absolute;
    top: -8px;
    right: -8px;
    width: 24px;
    height: 24px;
    background: var(--brutal-red, #ff0000);
    color: white;
    border: 2px solid var(--brutal-black, #000);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 14px;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .counter-block {
      padding: 0.75rem 1rem;
      gap: 0.5rem;
      box-shadow: 6px 6px 0 var(--brutal-shadow, rgba(0, 0, 0, 0.15));
    }

    .counter-content {
      gap: 0.5rem;
    }

    .counter-number {
      font-size: clamp(1.25rem, 4vw, 1.75rem);
    }

    .counter-label {
      font-size: 0.75rem;
    }
  }
</style>
